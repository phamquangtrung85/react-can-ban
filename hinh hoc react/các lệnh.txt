// Trong component cha
import Counter from './Counter';

function App() {
  return (
    <div>
      <Counter />
    </div>
  );
}

export default App;


// Trong component con
import React, { useState } from 'react';

function Counter() {
           // Khởi tạo state 'count' với giá trị 0
  const [count, setCount] = useState(0); 

  return (
    <div>
     {/* 
     + chèn biến state ở vị trí cần dùng trong ứng dụng count 
     + dùng hàm setCount trong các sự kiện của html
     + ví dụ: định nghĩa hàm sự kiện cho thẻ html là: () => setCount(count + 1)
     */}
      <p>Bạn đã click {count} lần</p>
      <button onClick={() => setCount(count + 1)}>
        Click vào đây
      </button>
    </div>
  );
}

export default Counter;

Chatgpt thì đi vào code thân thiện với người dùng.
Gemini thì đi vào giảng giải chi tiết tốt hơn chatgpt.
vậy muốn có lí thuyết tốt thì dùm Gemini, muốn code khô khang thì dùng Chatgpt.
===>DÙNG CÙNG LÚC CẢ HAI ĐỂ LÀM REACT SẼ HIỆU QUẢ CAO<====

BẮT BUỘC DÙNG VSCODE VÀ THAY ĐỔI CODE KHÓA ĐỂ HIỂU KỸ NỘI DUNG TÌM ĐƯỢC TỪ GEMINI.

resolved: gắn link tải gói thư viện cần thiết.
integrity: là mã xác thực đầy đủ của gói thư viện cần tải cho ứng dụng.
dependencies: gói thư viện cần thiết cho ứng dụng.
engines: máy chạy ứng dụng.
funding: tổ chức tài trợ.

React là một thư viện JavaScript phổ biến dùng để xây dựng giao diện người dùng (UI), đặc biệt là cho các ứng dụng web một trang (SPA - Single Page Application). Dưới đây là những kiến thức **căn bản về React** mà bạn cần nắm:

---

## 🧱 1. **Cài đặt React cơ bản**

Bạn cần cài **Node.js** và **npm (Node Package Manager)** trước.

### ✅ Tạo dự án React với `create-react-app`:

```bash
npx create-react-app ten-du-an
cd ten-du-an
npm start
```

---

## 📁 2. **Cấu trúc thư mục cơ bản**

Ví dụ trong `create-react-app`:

```
ten-du-an/
├── node_modules/
├── public/
├── src/
│   ├── App.js
│   ├── index.js
├── package.json
```

---

## 📦 3. **Các thành phần chính**

### 🧩 a. Component (Thành phần)

Là khối xây dựng giao diện, có thể dùng lại được.

#### Ví dụ component dạng function:

```jsx
function Welcome(props) {
  return <h1>Xin chào, {props.name}!</h1>;
}
```

### 🛠 b. JSX (JavaScript XML)

Cú pháp cho phép viết HTML trong JavaScript.

```jsx
const element = <h1>Hello world!</h1>;
```

---

## 🔁 4. **Props và State**

### 📤 Props (Thuộc tính)

* Dữ liệu truyền từ **cha xuống con**

```jsx
<Welcome name="Trung" />
```

### 🔄 State (Trạng thái)

* Dữ liệu nội bộ, có thể thay đổi.

```jsx
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);
  
  return (
    <div>
      <p>Bạn đã nhấn {count} lần</p>
      <button onClick={() => setCount(count + 1)}>Nhấn</button>
    </div>
  );
}
```

---

## 🔄 5. **Sự kiện (Event Handling)**

```jsx
<button onClick={handleClick}>Nhấn tôi</button>
```

---

## 🌐 6. **useEffect Hook**

Dùng để xử lý các hiệu ứng phụ như gọi API, gán sự kiện...

```jsx
useEffect(() => {
  console.log("Component đã render!");
}, []);
```

---

## 📦 7. **Import & Export**

```jsx
// Export
export default MyComponent;

// Import
import MyComponent from './MyComponent';
```

---

## 🧪 8. **Chạy thử và debug**

* `npm start`: chạy ứng dụng ở `http://localhost:3000`
* Dùng DevTools để kiểm tra component, props, state,...

---

## 💡 Gợi ý học tiếp:

* React Router (điều hướng)
* Context API hoặc Redux (quản lý state toàn cục)
* Gọi API bằng `fetch` hoặc `axios`
* Styling: CSS Modules, Tailwind, styled-components

---
